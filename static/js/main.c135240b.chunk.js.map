{"version":3,"sources":["components/Counter.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","start","useState","defaultStart","setDefaultStart","counter","setCounter","inputValue","setInputValue","useEffect","id","className","onClick","prev","onSubmit","e","preventDefault","test","placeholder","type","value","onChange","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAIaA,EAAU,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACxB,EAAwCC,mBAASD,GAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRL,EAAgBH,KACf,CAACA,IA+BJ,OACE,sBAAKS,GAAG,YAAR,UACE,oBAAG,YAAU,OAAb,4BACkB,IAChB,sBAAM,YAAU,UAAUC,UAAU,UAApC,mBACEV,EAAQE,EAAeE,QAI3B,wBACE,YAAU,UACVM,UAAU,sBACVC,QAzCkB,kBACtBX,EACIG,GAAgB,SAACS,GAAD,OAAUA,EAAO,KACjCP,GAAW,SAACO,GAAD,OAAUA,EAAO,MAmC9B,eAOA,wBACE,YAAU,UACVF,UAAU,yBACVC,QA3CqB,kBACzBX,EACIG,GAAgB,SAACS,GAAD,OAAUA,EAAO,KACjCP,GAAW,SAACO,GAAD,OAAUA,EAAO,MAqC9B,eAQA,uBAAMC,SAnCW,SAACC,GACpBA,EAAEC,iBAEE,KAAKC,KAAKV,KACZD,GAAYC,GACZH,GAAiBG,IAGnBC,EAAc,KA2BZ,UACE,gCACE,uBACE,YAAU,YACVG,UAAU,eACVO,YAAY,iBACZC,KAAK,SACLC,MAAOb,EACPc,SAnDqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAAgBd,EAAcc,EAAOF,YAsD9D,wBACED,KAAK,SACL,YAAU,aACVR,UAAU,sBAHZ,oBAOA,wBACE,YAAU,YACVA,UAAU,oBACVQ,KAAK,QACLP,QA/DY,WAClBR,EAAgBH,GAChBK,EAAW,GACXE,EAAc,KAwDV,0BChFKe,G,MAAM,kBACjB,qBAAKZ,UAAU,MAAf,SACE,cAAC,EAAD,QCMWa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c135240b.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport \"./styles.css\";\n\nexport const Counter = ({ start }) => {\n  const [defaultStart, setDefaultStart] = useState(start);\n  const [counter, setCounter] = useState(0);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  useEffect(() => {\n    setDefaultStart(start);\n  }, [start]);\n\n  const additionHandler = () =>\n    start\n      ? setDefaultStart((prev) => prev + 1)\n      : setCounter((prev) => prev + 1);\n\n  const subtractionHandler = () =>\n    start\n      ? setDefaultStart((prev) => prev - 1)\n      : setCounter((prev) => prev - 1);\n\n  const handleChangeInputValue = ({ target }) => setInputValue(target.value);\n\n  const handleReset = () => {\n    setDefaultStart(start);\n    setCounter(0);\n    setInputValue(\"\");\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (/\\d/.test(inputValue)) {\n      setCounter(+inputValue);\n      setDefaultStart(+inputValue);\n    }\n\n    setInputValue(\"\");\n  };\n\n  return (\n    <div id=\"container\">\n      <p data-test=\"text\">\n        Counter result:{\" \"}\n        <span data-test=\"counter\" className=\"counter\">{`${\n          start ? defaultStart : counter\n        }`}</span>\n      </p>\n\n      <button\n        data-test=\"add-btn\"\n        className=\"addition-button one\"\n        onClick={additionHandler}\n      >\n        +\n      </button>\n      <button\n        data-test=\"sub-btn\"\n        className=\"subtraction-button two\"\n        onClick={subtractionHandler}\n      >\n        -\n      </button>\n\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input\n            data-test=\"input-num\"\n            className=\"input-number\"\n            placeholder=\"change counter\"\n            type=\"number\"\n            value={inputValue}\n            onChange={handleChangeInputValue}\n          ></input>\n        </label>\n        <button\n          type=\"submit\"\n          data-test=\"change-btn\"\n          className=\"change-button three\"\n        >\n          Change\n        </button>\n        <button\n          data-test=\"reset-btn\"\n          className=\"reset-button four\"\n          type=\"reset\"\n          onClick={handleReset}\n        >\n          Reset\n        </button>\n      </form>\n    </div>\n  );\n};\n","import { Counter } from \"./components/Counter\";\n\nimport \"./App.css\";\n\nexport const App = () => (\n  <div className=\"App\">\n    <Counter />\n  </div>\n);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}